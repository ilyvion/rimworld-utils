# top-most EditorConfig file
root = true

# Unix-style newlines with a newline ending every file
[*]
end_of_line = lf
charset = utf-8
insert_final_newline = true
trim_trailing_whitespace = true
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = true

# 4 space indentation
[*.{cs,xml,yml,md,props,targets,csproj}]
indent_style = space
indent_size = 4
max_line_length = 100

[*.cs]

## ----- Code Style Rules ----- ##

# Simplify name
dotnet_diagnostic.IDE0001.severity = warning

# Simplify member access
dotnet_diagnostic.IDE0002.severity = warning

# Remove this or Me qualification
dotnet_diagnostic.IDE0003.severity = warning
dotnet_diagnostic.IDE0009.severity = none

# Remove unnecessary cast
dotnet_diagnostic.IDE0004.severity = warning

# Remove unnecessary using directives
# (Set MSBuild property 'GenerateDocumentationFile' to 'true' in project file to enable IDE0005)
# dotnet_diagnostic.IDE0005.severity = none

# Use var instead of explicit type
dotnet_diagnostic.IDE0007.severity = warning
dotnet_diagnostic.IDE0008.severity = none
csharp_style_var_for_built_in_types =  true:warning
csharp_style_var_when_type_is_apparent = true:warning
csharp_style_var_elsewhere = true:warning

# Add missing cases to switch statement
dotnet_diagnostic.IDE0010.severity = warning

# Add braces
dotnet_diagnostic.IDE0011.severity = warning

# Use throw expression
dotnet_diagnostic.IDE0016.severity = warning

# Use object initializers
dotnet_diagnostic.IDE0017.severity = warning

# Inline variable declaration
dotnet_diagnostic.IDE0018.severity = warning

# Use pattern matching to avoid 'as' followed by a 'null' check
dotnet_diagnostic.IDE0019.severity = warning

# Use pattern matching to avoid is check followed by a cast (with variable)
dotnet_diagnostic.IDE0020.severity = warning
# Use pattern matching to avoid is check followed by a cast (without variable)
dotnet_diagnostic.IDE0038.severity = warning

# Use expression body for constructors
dotnet_diagnostic.IDE0021.severity = warning

# Use expression body for methods
dotnet_diagnostic.IDE0022.severity = warning
csharp_style_expression_bodied_methods = true:warning

# Use expression body for conversion operators
dotnet_diagnostic.IDE0023.severity = warning

# Use expression body for operators
dotnet_diagnostic.IDE0024.severity = warning

# Use expression body for properties
dotnet_diagnostic.IDE0025.severity = warning

# Use expression body for indexers
dotnet_diagnostic.IDE0026.severity = warning

# Use expression body for accessors
dotnet_diagnostic.IDE0027.severity = warning

# Use collection initializers or expressions
dotnet_diagnostic.IDE0028.severity = warning

# Null check can be simplified (ternary conditional check)
dotnet_diagnostic.IDE0029.severity = warning
# Null check can be simplified (nullable ternary conditional check)
dotnet_diagnostic.IDE0030.severity = warning
# Null check can be simplified (if null check)
dotnet_diagnostic.IDE0270.severity = warning

# Use null propagation
dotnet_diagnostic.IDE0031.severity = warning

# Use auto-implemented property
dotnet_diagnostic.IDE0032.severity = warning

# Use explicitly provided tuple name
dotnet_diagnostic.IDE0033.severity = warning

# Simplify 'default' expression
dotnet_diagnostic.IDE0034.severity = warning

# Remove unreachable code
dotnet_diagnostic.IDE0035.severity = warning

# Order modifiers
dotnet_diagnostic.IDE0036.severity = warning

# Use inferred member name
dotnet_diagnostic.IDE0037.severity = warning

# Use local function instead of lambda
dotnet_diagnostic.IDE0039.severity = warning

# Add accessibility modifiers
dotnet_diagnostic.IDE0040.severity = warning

# Use 'is null' check
dotnet_diagnostic.IDE0041.severity = warning

# Deconstruct variable declaration
dotnet_diagnostic.IDE0042.severity = warning

# Add readonly modifier
dotnet_diagnostic.IDE0044.severity = warning

# Use conditional expression for assignment
dotnet_diagnostic.IDE0045.severity = warning

# Use conditional expression for return
dotnet_diagnostic.IDE0046.severity = warning

# Remove unnecessary parentheses
dotnet_diagnostic.IDE0047.severity = warning

# Add parentheses for clarity
dotnet_diagnostic.IDE0048.severity = warning

# Use language keywords instead of framework type names for type references
dotnet_diagnostic.IDE0049.severity = warning

# Convert anonymous type to tuple
dotnet_diagnostic.IDE0050.severity = warning

# Remove unused private member
dotnet_diagnostic.IDE0051.severity = warning
# Remove unread private member
dotnet_diagnostic.IDE0052.severity = warning

# Use expression body for lambdas
dotnet_diagnostic.IDE0053.severity = warning

# Use compound assignment
dotnet_diagnostic.IDE0054.severity = warning
# Use coalesce compound assignment
dotnet_diagnostic.IDE0074.severity = warning

# Fix formatting (disabled now that we use a custom formatter, csharpier)
dotnet_diagnostic.IDE0055.severity = none

# Use index operator
dotnet_diagnostic.IDE0056.severity = warning

# Use range operator
dotnet_diagnostic.IDE0057.severity = warning

# Remove unnecessary expression value
dotnet_diagnostic.IDE0058.severity = warning

# Remove unnecessary value assignment
dotnet_diagnostic.IDE0059.severity = warning

# Remove unused parameter
dotnet_diagnostic.IDE0060.severity = warning

# Use expression body for local functions
dotnet_diagnostic.IDE0061.severity = warning

# Make local function static
dotnet_diagnostic.IDE0062.severity = warning

# Use simple 'using' statement
dotnet_diagnostic.IDE0063.severity = warning

# Make struct fields writable
dotnet_diagnostic.IDE0064.severity = warning

# 'using' directive placement
dotnet_diagnostic.IDE0065.severity = warning

# Use switch expression
dotnet_diagnostic.IDE0066.severity = warning

# Use 'System.HashCode.Combine'
dotnet_diagnostic.IDE0070.severity = warning

# Simplify interpolation
dotnet_diagnostic.IDE0071.severity = warning

# Add missing cases to switch expression
dotnet_diagnostic.IDE0072.severity = warning

# Require file header
# dotnet_diagnostic.IDE0073.severity = warning

# Simplify conditional expression
dotnet_diagnostic.IDE0075.severity = warning

# Use pattern matching
dotnet_diagnostic.IDE0078.severity = warning
dotnet_diagnostic.IDE0260.severity = warning

# Remove unnecessary suppression
dotnet_diagnostic.IDE0079.severity = warning

# Remove unnecessary suppression operator
dotnet_diagnostic.IDE0080.severity = warning

# Convert typeof to nameof
dotnet_diagnostic.IDE0082.severity = warning

# Use pattern matching (not operator)
dotnet_diagnostic.IDE0083.severity = warning

# Simplify new expression
dotnet_diagnostic.IDE0090.severity = warning

# Remove unnecessary equality operator
dotnet_diagnostic.IDE0100.severity = error

# Remove unnecessary discard
dotnet_diagnostic.IDE0110.severity = warning

# Simplify LINQ expression
dotnet_diagnostic.IDE0120.severity = warning

# Simplify LINQ type check and cast
dotnet_diagnostic.IDE0121.severity = warning

# Namespace does not match folder structure
dotnet_diagnostic.IDE0130.severity = suggestion

# Simplify object creation
dotnet_diagnostic.IDE0140.severity = warning

# Prefer 'null' check over type check
dotnet_diagnostic.IDE0150.severity = warning

# Use block-scoped namespace
dotnet_diagnostic.IDE0160.severity = none
# Use file-scoped namespace
dotnet_diagnostic.IDE0161.severity = warning
csharp_style_namespace_declarations = file_scoped:warning

# Simplify property pattern
dotnet_diagnostic.IDE0170.severity = warning

# Use tuple to swap values
dotnet_diagnostic.IDE0180.severity = warning

# Remove unnecessary lambda expression
dotnet_diagnostic.IDE0200.severity = warning

# Convert to top-level statements
dotnet_diagnostic.IDE0210.severity = warning
# Convert to 'Program.Main' style program
dotnet_diagnostic.IDE0211.severity = none

# Add explicit cast in foreach loop
dotnet_diagnostic.IDE0220.severity = warning

# Use UTF-8 string literal
dotnet_diagnostic.IDE0230.severity = warning

# Nullable directive is redundant
dotnet_diagnostic.IDE0240.severity = warning
# Nullable directive is unnecessary
dotnet_diagnostic.IDE0241.severity = warning

# Struct can be made 'readonly'
dotnet_diagnostic.IDE0250.severity = warning

# Member can be made 'readonly'
dotnet_diagnostic.IDE0251.severity = warning

# Use 'nameof'
dotnet_diagnostic.IDE0280.severity = warning

# Use primary constructor
dotnet_diagnostic.IDE0290.severity = warning

# Use collection expression for array
dotnet_diagnostic.IDE0300.severity = warning

# Use collection expression for empty
dotnet_diagnostic.IDE0301.severity = warning

# Use collection expression for stackalloc
dotnet_diagnostic.IDE0302.severity = warning

# Use collection expression for Create()
dotnet_diagnostic.IDE0303.severity = warning

# Use collection expression for builder
dotnet_diagnostic.IDE0304.severity = warning

# Use collection expression for fluent
dotnet_diagnostic.IDE0305.severity = warning

# Use collection expression for new
dotnet_diagnostic.IDE0306.severity = warning

# Make anonymous function static
dotnet_diagnostic.IDE0320.severity = warning

# Prefer 'System.Threading.Lock'
dotnet_diagnostic.IDE0330.severity = warning

# Use unbound generic type
dotnet_diagnostic.IDE0340.severity = warning

# Use implicitly typed lambda
dotnet_diagnostic.IDE0350.severity = warning

# Use conditional delegate call
dotnet_diagnostic.IDE1005.severity = warning

# Naming rule violation: These words must begin with upper case characters
dotnet_diagnostic.IDE1006.severity = warning

# Implement with Copilot
dotnet_diagnostic.IDE3000.severity = warning

## ----- Code Quality Rules ----- ##

## Design rules

# Do not declare static members on generic types
dotnet_diagnostic.CA1000.severity = warning

# Types that own disposable fields should be disposable
dotnet_diagnostic.CA1001.severity = warning

# Do not expose generic lists
dotnet_diagnostic.CA1002.severity = suggestion

# Use generic event handler instances
dotnet_diagnostic.CA1003.severity = warning

# Avoid excessive parameters on generic types
dotnet_diagnostic.CA1005.severity = warning

# Enums should have zero value
dotnet_diagnostic.CA1008.severity = warning

# Collections should implement generic interface
dotnet_diagnostic.CA1010.severity = warning

# Abstract types should not have public constructors
dotnet_diagnostic.CA1012.severity = warning

# Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.CA1018.severity = warning

# Define accessors for attribute arguments
dotnet_diagnostic.CA1019.severity = warning

# Use properties where appropriate
dotnet_diagnostic.CA1024.severity = warning

# Mark enums with FlagsAttribute
dotnet_diagnostic.CA1027.severity = warning

# Use events where appropriate
dotnet_diagnostic.CA1030.severity = warning

# Do not catch general exception types
dotnet_diagnostic.CA1031.severity = suggestion

# Implement standard exception constructors
dotnet_diagnostic.CA1032.severity = warning

# Interface methods should be callable by child types
dotnet_diagnostic.CA1033.severity = warning

# Nested types should not be visible
dotnet_diagnostic.CA1034.severity = warning

# Override methods on comparable types
dotnet_diagnostic.CA1036.severity = warning

# Avoid empty interfaces
dotnet_diagnostic.CA1040.severity = warning

# Provide ObsoleteAttribute message
dotnet_diagnostic.CA1041.severity = warning

# Provide ObsoleteAttribute message
dotnet_diagnostic.CA1041.severity = warning

# Use integral or string argument for indexers
dotnet_diagnostic.CA1043.severity = warning

# Use integral or string argument for indexers
dotnet_diagnostic.CA1044.severity = warning

# Do not overload operator equals on reference types
dotnet_diagnostic.CA1046.severity = warning

# Do not declare protected members in sealed types
dotnet_diagnostic.CA1047.severity = warning

# Declare types in namespaces
dotnet_diagnostic.CA1050.severity = warning

# Do not declare visible instance fields
dotnet_diagnostic.CA1051.severity = warning

# Static holder types should be Static or NotInheritable
dotnet_diagnostic.CA1052.severity = warning

# URI parameters should not be strings
dotnet_diagnostic.CA1054.severity = warning

# URI return values should not be strings
dotnet_diagnostic.CA1055.severity = warning

# URI properties should not be strings
dotnet_diagnostic.CA1056.severity = warning

# Types should not extend certain base types
dotnet_diagnostic.CA1058.severity = warning

# Move P/Invokes to NativeMethods class
dotnet_diagnostic.CA1060.severity = warning

# Do not hide base class methods
dotnet_diagnostic.CA1061.severity = warning

# Validate arguments of public methods
dotnet_diagnostic.CA1062.severity = warning

# Implement IDisposable correctly
dotnet_diagnostic.CA1063.severity = warning

# Exceptions should be public
dotnet_diagnostic.CA1064.severity = warning

# Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1065.severity = warning

# Implement IEquatable when overriding Equals
dotnet_diagnostic.CA1066.severity = warning

# Override Equals when implementing IEquatable
dotnet_diagnostic.CA1067.severity = warning

# CancellationToken parameters must come last
dotnet_diagnostic.CA1068.severity = warning

# Enums should not have duplicate values
dotnet_diagnostic.CA1069.severity = warning

# Do not declare event fields as virtual
dotnet_diagnostic.CA1070.severity = warning

## Documentation rules

# Avoid using cref tags with a prefix
dotnet_diagnostic.CA1200.severity = warning

## Globalization rules

# Do not pass literals as localized parameters
dotnet_diagnostic.CA1303.severity = warning

# Specify CultureInfo
dotnet_diagnostic.CA1304.severity = warning

# Specify IFormatProvider
dotnet_diagnostic.CA1305.severity = warning

# Specify StringComparison for clarity
dotnet_diagnostic.CA1307.severity = warning

# Normalize strings to uppercase
dotnet_diagnostic.CA1308.severity = warning

# Use ordinal StringComparison
dotnet_diagnostic.CA1309.severity = warning

# Specify StringComparison for correctness
dotnet_diagnostic.CA1310.severity = warning

# Specify a culture or use an invariant version
dotnet_diagnostic.CA1311.severity = warning

# Specify marshalling for P/Invoke string arguments
dotnet_diagnostic.CA2101.severity = warning

## Portability and interoperability rules

# P/Invokes should not be visible
dotnet_diagnostic.CA1401.severity = warning

# Validate platform compatibility
dotnet_diagnostic.CA1416.severity = warning

# Do not use OutAttribute on string parameters for P/Invokes
dotnet_diagnostic.CA1417.severity = warning

# Validate platform compatibility
dotnet_diagnostic.CA1418.severity = warning

# Provide a parameterless constructor that is as visible as the containing type for concrete types derived from 'System.Runtime.InteropServices.SafeHandle'
dotnet_diagnostic.CA1419.severity = warning

# Property, type, or attribute requires runtime marshalling
dotnet_diagnostic.CA1420.severity = warning

# Method uses runtime marshalling when DisableRuntimeMarshallingAttribute is applied
dotnet_diagnostic.CA1421.severity = warning

# Validate platform compatibility - obsoleted APIs
dotnet_diagnostic.CA1422.severity = warning

## Maintainability rules

# Avoid excessive inheritance
dotnet_diagnostic.CA1501.severity = warning

# Avoid excessive complexity
dotnet_diagnostic.CA1502.severity = warning

# Avoid unmaintainable code
dotnet_diagnostic.CA1505.severity = warning

# Avoid excessive class coupling
dotnet_diagnostic.CA1506.severity = warning

# Use nameof in place of string
dotnet_diagnostic.CA1507.severity = warning

# Avoid dead conditional code
dotnet_diagnostic.CA1508.severity = warning

# Invalid entry in code metrics configuration file
dotnet_diagnostic.CA1509.severity = warning

# Use ArgumentNullException throw helper
dotnet_diagnostic.CA1510.severity = warning

# Use ArgumentException throw helper
dotnet_diagnostic.CA1511.severity = warning

# Use ArgumentOutOfRangeException throw helper
dotnet_diagnostic.CA1512.severity = warning

# Use ObjectDisposedException throw helper
dotnet_diagnostic.CA1513.severity = warning

# Avoid redundant length argument
dotnet_diagnostic.CA1514.severity = warning

# Consider making public types internal
dotnet_diagnostic.CA1515.severity = warning

# Use cross-platform intrinsics
dotnet_diagnostic.CA1516.severity = warning

## Naming Rules

# Do not name enum values 'Reserved'
dotnet_diagnostic.CA1700.severity = warning

# Identifiers should not contain underscores (RimWorld does)
dotnet_diagnostic.CA1707.severity = none

# Identifiers should differ by more than case
dotnet_diagnostic.CA1708.severity = warning

# Identifiers should have correct suffix
dotnet_diagnostic.CA1710.severity = warning

# Identifiers should not have incorrect suffix
dotnet_diagnostic.CA1711.severity = warning

# Do not prefix enum values with type name
dotnet_diagnostic.CA1712.severity = warning

# Events should not have before or after prefix
dotnet_diagnostic.CA1713.severity = warning

# Flags enums should have plural names
dotnet_diagnostic.CA1714.severity = warning

# Identifiers should have correct prefix
dotnet_diagnostic.CA1715.severity = warning

# Identifiers should not match keywords
dotnet_diagnostic.CA1716.severity = warning

# Only FlagsAttribute enums should have plural names
dotnet_diagnostic.CA1717.severity = warning

# Identifiers should not contain type names
dotnet_diagnostic.CA1720.severity = warning

# Property names should not match get methods
dotnet_diagnostic.CA1721.severity = warning

# Type names should not match namespaces
dotnet_diagnostic.CA1724.severity = warning

# Parameter names should match base declaration
dotnet_diagnostic.CA1725.severity = warning

# Use PascalCase for named placeholders
dotnet_diagnostic.CA1727.severity = warning

## Performance rules

# Use Literals Where Appropriate
dotnet_diagnostic.CA1802.severity = warning

# Do not initialize unnecessarily
dotnet_diagnostic.CA1805.severity = warning

# Do not ignore method results
dotnet_diagnostic.CA1806.severity = warning

# Initialize reference type static fields inline
dotnet_diagnostic.CA1810.severity = warning

# Avoid uninstantiated internal sealed classes (RimWorld does a lot of "external" instantiation)
dotnet_diagnostic.CA1812.severity = suggestion

# Avoid unsealed attributes
dotnet_diagnostic.CA1813.severity = warning

# Prefer jagged arrays over multidimensional
dotnet_diagnostic.CA1814.severity = warning

# Override equals and operator equals on value types
dotnet_diagnostic.CA1815.severity = warning

# Properties should not return arrays
dotnet_diagnostic.CA1819.severity = warning

# Test for empty strings using string length
dotnet_diagnostic.CA1820.severity = warning

# Remove empty finalizers
dotnet_diagnostic.CA1821.severity = warning

# Mark members as static
dotnet_diagnostic.CA1822.severity = warning

# Avoid unused private fields
dotnet_diagnostic.CA1823.severity = warning

# Mark assemblies with NeutralResourcesLanguageAttribute
dotnet_diagnostic.CA1824.severity = warning

# Avoid zero-length array allocations
dotnet_diagnostic.CA1825.severity = warning

# Use property instead of Linq Enumerable method
dotnet_diagnostic.CA1826.severity = warning

# Do not use Count()/LongCount() when Any() can be used
dotnet_diagnostic.CA1827.severity = warning

# Do not use CountAsync/LongCountAsync when AnyAsync can be used
dotnet_diagnostic.CA1828.severity = warning

# Use Length/Count property instead of Enumerable.Count method
dotnet_diagnostic.CA1829.severity = warning

# Prefer strongly-typed Append and Insert method overloads on StringBuilder
dotnet_diagnostic.CA1830.severity = warning

# Use AsSpan instead of Range-based indexers for string when appropriate
dotnet_diagnostic.CA1831.severity = warning

# Use AsSpan or AsMemory instead of Range-based indexers for getting ReadOnlySpan or ReadOnlyMemory portion of an array
dotnet_diagnostic.CA1832.severity = warning

# Use AsSpan or AsMemory instead of Range-based indexers for getting Span or Memory portion of an array
dotnet_diagnostic.CA1833.severity = warning

# Use StringBuilder.Append(char) for single character strings
dotnet_diagnostic.CA1834.severity = warning

# Prefer the memory-based overloads of ReadAsync/WriteAsync methods in stream-based classes
dotnet_diagnostic.CA1835.severity = warning

# Prefer IsEmpty over Count when available
dotnet_diagnostic.CA1836.severity = warning

# Use Environment.ProcessId instead of Process.GetCurrentProcess().Id
dotnet_diagnostic.CA1837.severity = warning

# Avoid StringBuilder parameters for P/Invokes
dotnet_diagnostic.CA1838.severity = warning

# Use Environment.ProcessPath instead of Process.GetCurrentProcess().MainModule.FileName
dotnet_diagnostic.CA1839.severity = warning

# Use Environment.CurrentManagedThreadId instead of Thread.CurrentThread.ManagedThreadId
dotnet_diagnostic.CA1840.severity = warning

# Prefer Dictionary Contains methods
dotnet_diagnostic.CA1841.severity = warning

# Do not use 'WhenAll' with a single task
dotnet_diagnostic.CA1842.severity = warning

# Do not use 'WaitAll' with a single task
dotnet_diagnostic.CA1843.severity = warning

# Provide memory-based overrides of async methods when subclassing 'Stream'
dotnet_diagnostic.CA1844.severity = warning

# Use span-based 'string.Concat'
dotnet_diagnostic.CA1845.severity = warning

# Prefer AsSpan over Substring
dotnet_diagnostic.CA1846.severity = warning

# Use String.Contains(char) instead of String.Contains(string) with single characters
dotnet_diagnostic.CA1847.severity = warning

# Use the LoggerMessage delegates
dotnet_diagnostic.CA1848.severity = warning

# Call async methods when in an async method
dotnet_diagnostic.CA1849.severity = warning

# Prefer static HashData method over ComputeHash
dotnet_diagnostic.CA1850.severity = warning

# Possible multiple enumerations of IEnumerable collection
dotnet_diagnostic.CA1851.severity = warning

# Seal internal types
dotnet_diagnostic.CA1852.severity = warning

# Unnecessary call to 'Dictionary.ContainsKey(key)'
dotnet_diagnostic.CA1853.severity = warning

# Prefer the IDictionary.TryGetValue(TKey, out TValue) method
dotnet_diagnostic.CA1854.severity = warning

# Use Span<T>.Clear() instead of Span<T>.Fill()
dotnet_diagnostic.CA1855.severity = warning

# Incorrect usage of ConstantExpected attribute
dotnet_diagnostic.CA1856.severity = warning

# The parameter expects a constant for optimal performance
dotnet_diagnostic.CA1857.severity = warning

# Use StartsWith instead of IndexOf
dotnet_diagnostic.CA1858.severity = warning

# Use concrete types when possible for improved performance
dotnet_diagnostic.CA1859.severity = warning

# Avoid using 'Enumerable.Any()' extension method
dotnet_diagnostic.CA1860.severity = warning

# Avoid constant arrays as arguments
dotnet_diagnostic.CA1861.severity = warning

# Use the 'StringComparison' method overloads to perform case-insensitive string comparisons
dotnet_diagnostic.CA1862.severity = warning

# Use 'CompositeFormat' for composite formatting
dotnet_diagnostic.CA1863.severity = warning

# Prefer the 'IDictionary.TryAdd(TKey, TValue)' method
dotnet_diagnostic.CA1864.severity = warning

# Use 'string.Method(char)' instead of 'string.Method(string)' for string with single char
dotnet_diagnostic.CA1865.severity = warning
dotnet_diagnostic.CA1866.severity = warning
dotnet_diagnostic.CA1867.severity = warning

# Unnecessary call to 'Contains' for sets
dotnet_diagnostic.CA1868.severity = warning

# Cache and reuse 'JsonSerializerOptions' instances
dotnet_diagnostic.CA1869.severity = warning

# Use a cached 'SearchValues' instance
dotnet_diagnostic.CA1870.severity = warning

# Do not pass a nullable struct to 'ArgumentNullException.ThrowIfNull'
dotnet_diagnostic.CA1871.severity = warning

# Prefer 'Convert.ToHexString' and 'Convert.ToHexStringLower' over call chains based on 'BitConverter.ToString'
dotnet_diagnostic.CA1872.severity = warning

## SingleFile rules

# Avoid accessing Assembly file path when publishing as a single file
dotnet_diagnostic.IL3000.severity = warning

# Avoid accessing Assembly file path when publishing as a single file
dotnet_diagnostic.IL3001.severity = warning

# Avoid calling members annotated with 'RequiresAssemblyFilesAttribute' when publishing as a single file
dotnet_diagnostic.IL3002.severity = warning

# 'RequiresAssemblyFilesAttribute' annotations must match across all interface implementations or overrides
dotnet_diagnostic.IL3003.severity = warning

# RequiresAssemblyFilesAttribute cannot be placed directly on application entry point
dotnet_diagnostic.IL3005.severity = warning

## Reliability rules

# Dispose objects before losing scope
dotnet_diagnostic.CA2000.severity = warning

# Do not lock on objects with weak identity
dotnet_diagnostic.CA2002.severity = warning

# Do not directly await a Task
dotnet_diagnostic.CA2007.severity = warning

# Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2008.severity = warning

# Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2009.severity = warning

# Do not assign property within its setter
dotnet_diagnostic.CA2011.severity = warning

# Use ValueTasks correctly
dotnet_diagnostic.CA2012.severity = warning

# Do not use ReferenceEquals with value types
dotnet_diagnostic.CA2013.severity = warning

# Do not use stackalloc in loops.
dotnet_diagnostic.CA2014.severity = warning

# Do not define finalizers for types derived from MemoryManager<T>
dotnet_diagnostic.CA2015.severity = warning

# Forward the CancellationToken parameter to methods that take one
dotnet_diagnostic.CA2016.severity = warning

# Parameter count mismatch
dotnet_diagnostic.CA2017.severity = warning

# The count argument to Buffer.BlockCopy should specify the number of bytes to copy
dotnet_diagnostic.CA2018.severity = warning

# ThreadStatic fields should not use inline initialization
dotnet_diagnostic.CA2019.severity = warning

# Prevent behavioral change caused by built-in operators of IntPtr/UIntPtr
dotnet_diagnostic.CA2020.severity = warning

# Don't call Enumerable.Cast<T> or Enumerable.OfType<T> with incompatible types
dotnet_diagnostic.CA2021.severity = warning

# Avoid inexact read with Stream.Read
dotnet_diagnostic.CA2022.severity = warning

# Do not use StreamReader.EndOfStream in async methods
dotnet_diagnostic.CA2024.severity = warning

# Do not pass IDisposable instances into unawaited tasks
dotnet_diagnostic.CA2025.severity = warning

## Security rules

# Review visible event handlers
dotnet_diagnostic.CA2109.severity = warning

# Seal methods that satisfy private interfaces
dotnet_diagnostic.CA2119.severity = warning

# Do not use insecure deserializer BinaryFormatter
dotnet_diagnostic.CA2300.severity = warning

# Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder
dotnet_diagnostic.CA2301.severity = warning

# Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize
dotnet_diagnostic.CA2302.severity = warning

# Do not use insecure randomness
dotnet_diagnostic.CA5394.severity = warning

## Usage rules

# CA1801: Review unused parameters
dotnet_diagnostic.CA1801.severity = warning

# CA1816: Call GC.SuppressFinalize correctly
dotnet_diagnostic.CA1816.severity = warning

# CA2200: Rethrow to preserve stack details
dotnet_diagnostic.CA2200.severity = warning

# CA2201: Do not raise reserved exception types
dotnet_diagnostic.CA2201.severity = warning

# CA2207: Initialize value type static fields inline
dotnet_diagnostic.CA2207.severity = warning

# CA2208: Instantiate argument exceptions correctly
dotnet_diagnostic.CA2208.severity = warning

# CA2211: Non-constant fields should not be visible
dotnet_diagnostic.CA2211.severity = warning

# CA2213: Disposable fields should be disposed
dotnet_diagnostic.CA2213.severity = warning

# CA2214: Do not call overridable methods in constructors
dotnet_diagnostic.CA2214.severity = warning

# CA2215: Dispose methods should call base class dispose
dotnet_diagnostic.CA2215.severity = warning

# CA2216: Disposable types should declare finalizer
dotnet_diagnostic.CA2216.severity = warning
    
# CA2217: Do not mark enums with FlagsAttribute
dotnet_diagnostic.CA2217.severity = warning

# CA2218: Override GetHashCode on overriding Equals
dotnet_diagnostic.CA2218.severity = warning

# CA2219: Do not raise exceptions in exception clauses
dotnet_diagnostic.CA2219.severity = warning

# CA2224: Override equals on overloading operator equals
dotnet_diagnostic.CA2224.severity = warning

# CA2225: Operator overloads have named alternates
dotnet_diagnostic.CA2225.severity = warning

# CA2226: Operators should have symmetrical overloads
dotnet_diagnostic.CA2226.severity = warning

# CA2227: Collection properties should be read only
dotnet_diagnostic.CA2227.severity = warning

# CA2229: Implement serialization constructors
dotnet_diagnostic.CA2229.severity = warning

# CA2231: Overload operator equals on overriding ValueType.Equals
dotnet_diagnostic.CA2231.severity = warning

# CA2234: Pass System.Uri objects instead of strings
dotnet_diagnostic.CA2234.severity = warning

# CA2235: Mark all non-serializable fields
dotnet_diagnostic.CA2235.severity = warning

# CA2237: Mark ISerializable types with SerializableAttribute
dotnet_diagnostic.CA2237.severity = warning

# CA2241: Provide correct arguments to formatting methods
dotnet_diagnostic.CA2241.severity = warning

# CA2242: Test for NaN correctly
dotnet_diagnostic.CA2242.severity = warning

# CA2243: Attribute string literals should parse correctly
dotnet_diagnostic.CA2243.severity = warning

# CA2244: Do not duplicate indexed element initializations
dotnet_diagnostic.CA2244.severity = warning

# CA2245: Do not assign a property to itself
dotnet_diagnostic.CA2245.severity = warning

# CA2246: Do not assign a symbol and its member in the same statement
dotnet_diagnostic.CA2246.severity = warning

# CA2247: Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum
dotnet_diagnostic.CA2247.severity = warning

# CA2248: Provide correct 'enum' argument to 'Enum.HasFlag'
dotnet_diagnostic.CA2248.severity = warning

# CA2249: Consider using String.Contains instead of String.IndexOf
dotnet_diagnostic.CA2249.severity = warning

# CA2250: Use ThrowIfCancellationRequested
dotnet_diagnostic.CA2250.severity = warning

# CA2251: Use String.Equals over String.Compare
dotnet_diagnostic.CA2251.severity = warning

# CA2252: Opt in to preview features
dotnet_diagnostic.CA2252.severity = warning

# CA2253: Named placeholders should not be numeric values
dotnet_diagnostic.CA2253.severity = warning

# CA2254: Template should be a static expression
dotnet_diagnostic.CA2254.severity = warning

# CA2255: The ModuleInitializer attribute should not be used in libraries
dotnet_diagnostic.CA2255.severity = warning

# CA2256: All members declared in parent interfaces must have an implementation in a DynamicInterfaceCastableImplementation-attributed interface
dotnet_diagnostic.CA2256.severity = warning

# CA2257: Members defined on an interface with 'DynamicInterfaceCastableImplementationAttribute' should be 'static'
dotnet_diagnostic.CA2257.severity = warning

# CA2258: Providing a 'DynamicInterfaceCastableImplementation' interface in Visual Basic is unsupported
dotnet_diagnostic.CA2258.severity = warning

# CA2259: Ensure ThreadStatic is only used with static fields
dotnet_diagnostic.CA2259.severity = warning

# CA2260: Implement generic math interfaces correctly
dotnet_diagnostic.CA2260.severity = warning

# CA2261: Do not use ConfigureAwaitOptions.SuppressThrowing with Task<TResult>
dotnet_diagnostic.CA2261.severity = warning

# CA2262: Set MaxResponseHeadersLength properly
dotnet_diagnostic.CA2262.severity = warning

# CA2264: Do not pass a non-nullable value to 'ArgumentNullException.ThrowIfNull'
dotnet_diagnostic.CA2264.severity = warning

# CA2265: Do not compare Span<T> to null or default
dotnet_diagnostic.CA2265.severity = warning

# CA2263: Prefer generic overload when type is known
dotnet_diagnostic.CA2263.severity = warning

## ----- C# Compiler Messages ----- ##

# The result of the expression is always 'false' or 'true'
dotnet_diagnostic.CS8073.severity = warning

## ----- .NET formatting rules ----- ##
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = true

# Newlines
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = one_less_than_current
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = true

# Spaces
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false

# Wrapping
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = false

[**/HarmonyPatches/*.cs]
dotnet_diagnostic.IDE0051.severity = none

[{*Def,*DefOf,CompProperties_*}.cs]
dotnet_diagnostic.CA1051.severity = suggestion

[*DefOf.cs]
dotnet_diagnostic.CS1591.severity = suggestion
dotnet_diagnostic.CS0649.severity = suggestion
dotnet_diagnostic.CS8618.severity = suggestion

[CompProperties_*.cs]
dotnet_diagnostic.CS0649.severity = suggestion
dotnet_diagnostic.CS8618.severity = suggestion

[*AssemblyInfo.cs]
dotnet_diagnostic.CS0436.severity = none
